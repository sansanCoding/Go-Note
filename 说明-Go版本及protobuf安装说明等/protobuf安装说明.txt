##########################################################################
1.什么是protobuf
Protobuf（Protocol Buffer）是google 的一种数据交换的格式，它独立于语言，独立于平台。google 提供了多种语言的实现：java、c#、c++、go 和 python，每一种实现都包含了相应语言的编译器以及库文件。由于它是一种二进制的格式，比使用 xml 进行数据交换快许多。可以把它用于分布式应用之间的数据通信或者异构环境下的数据交换。作为一种效率和兼容性都很优秀的二进制数据传输格式，可以用于诸如网络传输、配置文件、数据存储等诸多领域。（参考链接）

2.什么是protoc
protoc是protobuf文件（.proto）的编译器（参考链接），可以借助这个工具把 .proto 文件转译成各种编程语言对应的源码，包含数据类型定义、调用接口等。

3.什么是protoc-gen-go
protoc-gen-go是protobuf编译插件系列中的Go版本。从上一小节知道原生的protoc并不包含Go版本的插件，不过可以在github上发现专门的代码库（参见github库）。

由于protoc-gen-go是Go写的，所以安装它变得很简单，只需要运行
go get -u github.com/golang/protobuf/protoc-gen-go，
便可以在$GOPATH/bin目录下发现这个工具。至此，就可以通过下面的命令来使用protoc-gen-go了。

protoc --go_out=output_directory input_directory/file.proto
其中"--go_out="表示生成Go文件，protoc会自动寻找PATH（系统执行路径）中的protoc-gen-go执行文件。
##########################################################################

linux-protobuf安装说明

1.进入/data目录(/data目录可随意指定),创建并进入protobuf目录
$ cd /data;
$ mkdir protobuf;
$ cd protobuf;


2.找到protobuf官网下载地址:https://github.com/protocolbuffers/protobuf/releases
#如当前最新的是3.12.3版本,选择protobuf-all下载,这样是比较全的依赖.
#使用wget下载时,有可能因https检测而无法下载完成,需要添加参数--no-check-certificate后,按http方式下载即可
###如果使用wget --no-check-certificate 一直无法下载完成,则使用浏览器下载方式进行下载处理###
$ cd /data/protobuf;
$ wget --no-check-certificate https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protobuf-all-3.12.3.tar.gz;


3.将protobuf-all-3.12.3.tar.gz解压到当前目录(即/data/protobuf目录下)
$ cd /data/protobuf;
#解压期间有可能提示时间是未来时间(时间戳 2020-06-03 04:17:08 是未来的 35457456.966029608 秒之后)什么的，先不用管。
#有可能是系统时间与硬件时间不一致，最主要的是系统时间和硬件时间都要与现实时间保持一致，使用ntpdate+hwclock -w解决网络时间统一问题!
$ tar -zxvf protobuf-all-3.12.3.tar.gz;

4.进行配置、编译、编译并安装
#1.完整路径/data/protobuf/protobuf-3.12.3
$ cd protobuf-3.12.3/;

    #可先不按指定路径安装存放;如果不想安装在 /usr/local 目录下，可以解压到其他的其他，并把解压路径下的 bin 目录 加入到环境变量即可。
    #$ ./configure –prefix=/data/protobuf  #你的安装路径

#2../configure 默认安装位置在/usr/local
$ ./configure
#######################################################################################
    #./configure执行成功后最后显示如下即是ok的:
    checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
    checking if more special flags are required for pthreads... no
    checking whether to check for GCC pthread/shared inconsistencies... yes
    checking whether -pthread is sufficient with -shared... yes
    checking for gtest-config... no
    checking that generated files are newer than configure... done
    configure: creating ./config.status
    config.status: creating Makefile
    config.status: creating scripts/gmock-config
    config.status: creating build-aux/config.h
    config.status: executing depfiles commands
    config.status: executing libtool commands
#######################################################################################

#3.
$ make

#4.
$ make check
#######################################################################################
    #make check 最后显示如下即是ok的:
        ============================================================================
        Testsuite summary for Protocol Buffers 3.12.3
        ============================================================================
        # TOTAL: 7
        # PASS:  7
        # SKIP:  0
        # XFAIL: 0
        # FAIL:  0
        # XPASS: 0
        # ERROR: 0
        ============================================================================
        make[3]: Leaving directory `/data/protobuf/protobuf-3.12.3/src'
        make[2]: Leaving directory `/data/protobuf/protobuf-3.12.3/src'
        make[1]: Leaving directory `/data/protobuf/protobuf-3.12.3/src'
#######################################################################################
[root@py protobuf-3.12.3]# make install

#5.
$ make install
#######################################################################################
    #make install 最后显示如下即是ok的:
    /bin/mkdir -p '/usr/local/include/google/protobuf/stubs'
    /usr/bin/install -c -m 644  google/protobuf/stubs/callback.h google/protobuf/stubs/bytestream.h google/protobuf/stubs/casts.h google/protobuf/stubs/common.h google/protobuf/stubs/fastmem.h google/protobuf/stubs/hash.h google/protobuf/stubs/logging.h google/protobuf/stubs/macros.h google/protobuf/stubs/map_util.h google/protobuf/stubs/mutex.h google/protobuf/stubs/once.h google/protobuf/stubs/platform_macros.h google/protobuf/stubs/port.h google/protobuf/stubs/status.h google/protobuf/stubs/stl_util.h google/protobuf/stubs/stringpiece.h google/protobuf/stubs/strutil.h google/protobuf/stubs/template_util.h '/usr/local/include/google/protobuf/stubs'
    make[2]: Leaving directory `/data/protobuf/protobuf-3.12.3/src'
    make[1]: Leaving directory `/data/protobuf/protobuf-3.12.3/src'
#######################################################################################

./configure 执行过程中的错误集合:#########################################################
#1../configure 有可能涉及系统时间更新.
    #使用ntpdate更新网络时间,需要联网!
    $ yum -y install rdate
    $ yum -y install ntpdate

    #a.更新同步网络时间
    $ ntpdate -u ntp.api.bz
    #b.将当前时间和日期写入BIOS，避免重启后失效：
    $ hwclock -w

    #ntp常用服务器：
    中国国家授时中心：210.72.145.44
    NTP服务器(上海) ：ntp.api.bz
    美国： time.nist.gov
    复旦： ntp.fudan.edu.cn
    微软公司授时主机(美国) ：time.windows.com
    北京邮电大学 : s1a.time.edu.cn
    清华大学 : s1b.time.edu.cn
    北京大学 : s1c.time.edu.cn
    台警大授时中心(台湾)：asia.pool.ntp.org

#2.提示configure: error: *** A compiler with support for C++11 language features is required.
    #原因:是因为编译器版本不支持c++11,所以需要安装高版本gcc编译器以支持c++11.
    #gcc4.7版本以上(包含4.7)才支持c++11.
    #gcc4.8升级操作:
        #使用gcc -v查看gcc当前版本
        $ gcc -v
            #显示如下:
            gcc 版本 4.4.7 20120313 (Red Hat 4.4.7-18) (GCC)

        #安装仓库(注意权限，一般都是root)
        $ wget http://people.centos.org/tru/devtools-2/devtools-2.repo
        $ mv devtools-2.repo /etc/yum.repos.d

        #升级gcc等
        $ yum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++

        #保存以前的gcc
        $ mv /usr/bin/gcc /usr/bin/gcc-4.4.7;
        $ mv /usr/bin/g++ /usr/bin/g++-4.4.7;
        $ mv /usr/bin/c++ /usr/bin/c++-4.4.7;

        #为新版本的gcc创建软连接
        $ ln -s /opt/rh/devtoolset-2/root/usr/bin/gcc /usr/bin/gcc;
        $ ln -s /opt/rh/devtoolset-2/root/usr/bin/c++ /usr/bin/c++;
        $ ln -s /opt/rh/devtoolset-2/root/usr/bin/g++ /usr/bin/g++;

        #再使用gcc -v查看gcc当前版本
        $ gcc -v
            #显示如下:
            gcc version 4.8.2 20140120 (Red Hat 4.8.2-15) (GCC)
#########################################################

5.最后make install 安装完毕后使用protoc --version查看版本号输出,输出的版本号对应,即安装成功
$ protoc --version
    #输出显示如下:
    libprotoc 3.12.3

####################################如下都是docker容器里的配置####################################
	##若提示如下,则需要再敲入命令export LD_LIBRARY_PATH=/usr/local/lib/即可
	root@1a64dad14913:/go/src/protobuf-21.4# protoc --version
	protoc: error while loading shared libraries: libprotoc.so.32: cannot open shared object file: No such file or directory
	##敲入命令export LD_LIBRARY_PATH=/usr/local/lib/
	root@1a64dad14913:/go/src/protobuf-21.4# export LD_LIBRARY_PATH=/usr/local/lib/	#这一步可能会是会话型设置,即临时的,最好还是配置到永久
	root@1a64dad14913:/go/src/protobuf-21.4# protoc --version
	libprotoc 3.21.4

	##同时编辑vim /root/.bashrc,写入如下配置
	export LD_LIBRARY_PATH=/usr/local/lib/
	export GOPATH=/go
	export PATH=$PATH:$GOPATH/bin
	##再退出/root/.bashrc文件,再不重启使刚才编辑的命令有效
	source /root/.bashrc
	
	##最后再使用如下命令更新下proto相关扩展---自go1.17后使用go install安装(-i可以看到安装时的详细信息)---
	go get -u github.com/golang/protobuf/{proto,protoc-gen-go}
	go install -i google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
	
##################################################################################################

6.protobuf按上述流程安装完毕后,未将相关命令写入到/etc/profile中,默认命令安装到目录路径如下:
$ which protoc
    #输出显示如下:
    /usr/local/bin/protoc


7.protobuf安装完成后的目录路径如下:
$ less /usr/local/lib/
    #输出显示如下:
    libprotobuf.a               libprotobuf-lite.la         libprotobuf-lite.so.23.0.3  libprotobuf.so.23.0.3       libprotoc.so                pkgconfig/
    libprotobuf.la              libprotobuf-lite.so         libprotobuf.so              libprotoc.a                 libprotoc.so.23
    libprotobuf-lite.a          libprotobuf-lite.so.23      libprotobuf.so.23           libprotoc.la                libprotoc.so.23.0.3

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
上述的protobuf安装完毕后,必须加载protoc-gen-go插件,protobuf对go才有效果
$ go get -u github.com/golang/protobuf/protoc-gen-go
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~