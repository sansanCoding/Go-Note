1.进入到/etc/profile 文件中,在于之前配置的GOPATH相关的环境变量最下面配置GOMODULE

      #进入文件
      vim /etc/profile

      #找到如下之前Go相关配置的地方
      export GOROOT=/root/go_test/go
      export PATH=$GOROOT/bin:$PATH
      export GOPATH=/root/go

      #在上面的最后追加如下  
      export GO111MODULE=on
      export GOPROXY=https://goproxy.io

            ################## 当上面的一个地址不顶用时,可配置成下面多个地址的 ###############################
            # export GOPROXY=https://goproxy.cn,https://gocenter.io,https://goproxy.io,direct
            ##########################################################################################

      #保存并退出/etc/profile,刷新下环境变量
      source /etc/profile



2.使用go mod init 创建go.mod文件后，再进入main.go文件包含一个扩展(即PKG里不存在的)
      $ cd /root;
      $ mkdir go_mod;
      $ cd go_mod;
      $ go mod init go_mod;
            #go.mod文件创建后显示如下:
            module go_mod

            go 1.17

      $ vim main.go
            #写入如下内容,保存并退出
            package main

            import(
                    iris "github.com/kataras/iris/v12"
            )

            func main(){
                    app := iris.New()
                    app.Get("/", func(ctx iris.Context) {
                            ctx.HTML("<h1>Hello World!</h1>")
                    })

                    app.Run(iris.Addr(":8080"))
            }
      $ go run ./main.go
            #此时由于之前没有下载过这个iris的包,所以会直接提示如下错误 "github.com/kataras/iris/v12" 找不到,自Go1.16版本后,就需要手动执行go get下载对应的扩展
            main.go:4:2: no required module provides package github.com/kataras/iris/v12; to add it:
	            go get github.com/kataras/iris/v12
      
      $ go get -u -v github.com/kataras/iris/v12
            #下载时显示如下效果:
            go: downloading github.com/BurntSushi/toml v0.4.1
            go: downloading github.com/kataras/golog v0.1.7
            go: downloading gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b
            go: downloading github.com/kataras/pio v0.0.10
            go: downloading github.com/Shopify/goreferrer v0.0.0-20210630161223-536fa16abd6f
            ....
            go get: upgraded golang.org/x/text v0.3.2 => v0.3.7
            go get: upgraded gopkg.in/ini.v1 v1.51.1 => v1.63.2
            
      
      #此时再次执行go run ./main.go就可以运行了
      $ go run ./main.go
            ##显示如下效果(此时相当于开启一个进程并监听8080端口，CTRL+C就会断了这个监听8080进程):
            Now listening on: http://localhost:8080
            Application started. Press CTRL+C to shut down.
      
      #开另一个xshell窗口,访问下localhost:8080
      $ curl 192.168.254.166:8080
            ##输出如下:
            <h1>Hello World!</h1>
            
      ----- 至此看到输出成功,go mod配置以及使用都是可以的了 -----
            

            
3.在任意非GOPATH目录下,直接go mod init报错,需要指定module模块名称
  $ cd /root;
  $ mkdir go_tt;
  $ cd go_tt;
  $ mkdir src;
  $ cd src;
  $ go mod init
      #报错提示如下
      go: cannot determine module path for source directory /root/go_tt/src (outside GOPATH, module path must be specified)
  #解决如上报错,只需指定module模块名字即可
  $ go mod init go_tt 
  或
  $ go mod init github.com/go_tt/hello
  
  
 
###################################################### go.mod在1.16之前和之后的依赖下载说明 #########################################################################
通过在程序文件中import对应的包，在go 1.16之前的版本中，运行go命令（如go run， go build ， go test）时， go会通过以下规则自动解析并下载包： 
1、添加特定版本的包：要import的包在go.mod文件中有对应的的require描述，则按对应描述的版本下载。 
2、添加最新版本的包：要import的包 在go.mod中没有require描述，则按最新版本下载该包，同时将该包加入到go.mod中。

在go 1.16版本中，运行go命令（go run, go build,go test）时，如果import的依赖在go.mod文件中没有，不会再自动下载并修改go.mod和go.sum文件，而会提示错误，并需要手动执行 go get命令下载对应的包。 原因是自动修复的方式不是在任何场景下都适用：如果导入的包在没有提供任何依赖的情况自动添加新依赖，则可能会引起公共依赖包的升级等。

通过运行 go get ./ ... 可以自动查找并下载所有的包

添加完包后，可以通过使用 go list -m all 查看当前模块所依赖的包列表。

在go.mod所在根目录下，除了维护go.mod文件外，还有一个go.sum文件。go.sum文件是对导入的依赖包的特定版本的hash校验值，作用就是确保将来下载的依赖包版本和第一次下载到的依赖版的版本号相同，以防止在将来有版本号升级后 程序不兼容的问题。所以，go.mod和go.sum文件都需要被加入版本管理中。
##################################################################################################################################################################
            
            
###################################################### go get 命令说明 ###########################################################################################
go get:下载导入路径指定的包及其依赖项，然后安装命名包，即执行go install命令。

用法：go get [-d] [-f] [-t] [-u] [-fix] [-insecure] [build flags] [packages]

标记名称 描述
-d 让命令程序只执行下载动作，而不执行安装动作。
-f 仅在使用-u标记时才有效。该标记会让命令程序忽略掉对已下载代码包的导入路径的检查。如果下载并安装的代码包所属的项目是你从别人那里Fork过来的，那么这样做就尤为重要了。
-fix 让命令程序在下载代码包后先执行修正动作，而后再进行编译和安装。
-insecure 允许命令程序使用非安全的scheme（如HTTP）去下载指定的代码包。如果你用的代码仓库（如公司内部的Gitlab）没有HTTPS支持，可以添加此标记。请在确定安全的情况下使用它。
-t 让命令程序同时下载并安装指定的代码包中的测试源码文件中依赖的代码包。
-u 让命令利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。
-v 打印出被构建的代码包的名字
-x 打印出用到的命令

一般都是使用 go get -u -v github.com/kataras/iris/v12 下载扩展,如果不加-u 有可能下载下来的扩展是旧的!!!
##################################################################################################################################################################


###################################################### go run等执行main文件的命令说明 ##############################################################################
go run : 编译并直接运行程序，不生成编译文件。

go build : 用于测试编译包，主要检查是否有编译错误，不会产生结果文件，如果编译的是一个可执行文件的源码(即main包)，会在执行目录下生成可执行文件。

go install : 先编译导入的包文件，包文件编译完后再编译主程序，再将编译后的可执行文件放到bin目录下($GOPATH/bin);如果编译的是某个依赖包，编译后的依赖放到pkg目录下($GOPATH/pkg)。

go get : git clone+go install (需要翻墙，一般直接clone)。
##################################################################################################################################################################


###################################################### 网上找的：目前发现的几个不错的goproxy ######################################################
阿里云
配置如下：
export GOPROXY=https://mirrors.aliyun.com/goproxy/

nexus社区提供的
配置如下：
export GOPROXY=https://gonexus.dev

goproxy.io 的
配置如下：
export GOPROXY=https://goproxy.io/

基于athens的公共服务
配置如下：
export GOPROXY=https://athens.azurefd.net

官方提供的(jfrog,golang)
export GOPROXY=https://gocenter.io
export GOPROXY=https://proxy.golang.org

七牛云赞助支持的
export GOPROXY=https://goproxy.cn
 
说明:
国内一般来说使用阿里云的基本够用了，但是有时阿里云也会不好使，后边的几个可以可以做为后备，以备不时之需。
##################################################################################################################################################################
